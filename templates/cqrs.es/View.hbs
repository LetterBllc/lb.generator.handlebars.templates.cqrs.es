using System;
using System.Linq;
using System.Threading.Tasks;
using CommonServiceLocator;
using {{domain.CoreESNamespace}};
using {{domain.CoreESNamespace}}.Interfaces;
using {{domain.CoreNamespace}}.Logging;
using MassTransit;
using Microsoft.Extensions.Logging;
using PetaPoco;
using {{domain.Namespace}}.Dtos;
using {{domain.Namespace}}.Events;
using {{domain.Namespace}}.Shared;

namespace {{domain.Namespace}}.Views
{
    {{#each entity.Views}}
    [CreateTable({{dtoName}}.CreateViewTableStatement)]
    public partial class {{Name}} :
        IView{{#each Events}},
        IConsumer<{{Name}}>{{/each}}
    {
        private readonly IDatabase _database;
        private readonly ILogger _log;

        public {{Name}}()
        {
            _database = ServiceLocator.Current.GetInstance<IDatabase>();
            _log = ServiceLocator.Current.GetInstance<ILogger>();
            _database.Execute({{dtoName}}.CreateViewTableStatement);
        }
        {{#each Events}}

        public Task Consume(ConsumeContext<{{Name}}> context)
        {
            return Task.Run(() =>
            {
                _log?.Debug($"{{../Name}}: Consuming {{Name}} - {context.Message.Id}");

                try
                {
                    var message = context.Message;

                    var handlerToken = new HandlerToken();

                    HandleEvent(message, handlerToken);

                    if (handlerToken.Handled)
                    {
                        _log?.Debug($"{{../Name}}: {{Name}} Handled - {context.Message.Id}");
                        return;
                    }

                    var cancellationToken = new CancellationToken();
                    {{#if relatedAction.UseConstructor}}
                    {{#if eventCondition}}

                    if (!({{{eventCondition}}}))
                        return;
                    {{/if}}

                    var {{dtoInstance}} = new {{dtoName}}();
                    {{else}}

                    var {{dtoInstance}} = _database.Query<{{dtoName}}>(
                        $"SELECT * FROM dbo.{{../Name}} WHERE {{../idProperty.Name}} = '{message.{{actionProperty.Name}}{{write '}'}}'"
                    ).SingleOrDefault();
                    {{#if eventCondition}}
                    {{#if RemoveExistingViewOnUnmetCondition}}

                    if (!({{{eventCondition}}}))
                    {
                        if ({{dtoInstance}} == null)
                            return;

                        _database.Delete({{dtoInstance}});

                        return;
                    }
                    {{else}}

                    if (!({{{eventCondition}}}))
                        return;
                    {{/if}}
                    {{/if}}
                    {{#if InsertMissingView}}

                    var insert = false;

                    if ({{dtoInstance}} == null)
                    {
                        insert = true;
                        {{dtoInstance}} = new {{dtoName}}();
                        {{#each relatedAction.Properties}}
                        {{#if IsId}}
                        {{../dtoInstance}}.{{Name}} = message.{{Name}};
                        {{/if}}
                        {{/each}}

                        PrepareNewView(message, {{../dtoInstance}}, cancellationToken);

                        if (cancellationToken.Cancel)
                            return;
                    }
                    {{else}}

                    if ({{dtoInstance}} == null)
                        return;
                    {{/if}}
                    {{/if}}

                    {{#each relatedAction.Properties}}
                    {{#if IsId}}
                    {{#if ../relatedAction.UseConstructor}}
                    {{../dtoInstance}}.{{Name}} = message.{{Name}};
                    {{/if}}
                    {{else}}
                    {{#if (existsIn ../../Properties 'Name' Name)}}
                    {{../dtoInstance}}.{{Name}} = message.{{Name}};
                    {{/if}}
                    {{/if}}
                    {{/each}}
                    {{#if UpdateVersion}}
                    {{../dtoInstance}}.Version = message.Version;
                    {{/if}}

                    PrepareView(message, {{../dtoInstance}}, cancellationToken);

                    if (cancellationToken.Cancel)
                        return;
                    {{#if eventAction}}

                    {{{eventAction}}}
                    {{/if}}
                    {{#if relatedAction.UseConstructor}}

                    _database.Insert({{dtoInstance}});
                    {{else}}
                    {{#if InsertMissingView}}

                    if (insert)
                        _database.Insert({{dtoInstance}});
                    else
                        _database.Save({{dtoInstance}});
                    {{else}}

                    _database.{{DatabaseAction}}({{dtoInstance}});
                    {{/if}}
                    {{/if}}

                    _log?.Debug($"{{../Name}}: Consumed {{Name}} - {context.Message.{{actionProperty.Name}}{{write '}'}}");
                }
                catch(Exception exception)
                {
                    _log?.Error($"{{../Name}}: Consuming {{Name}} - {context.Message.{{actionProperty.Name}}{{write '}'}}  Error: {exception.Message}", exception);
                    throw;
                }
            });
        }

        partial void HandleEvent({{Name}} message, HandlerToken handlerToken);
        partial void PrepareView({{Name}} message, {{dtoName}} {{dtoInstance}}, CancellationToken cancellationToken);
        {{#if InsertMissingView}}
        partial void PrepareNewView({{Name}} message, {{dtoName}} {{dtoInstance}}, CancellationToken cancellationToken);
        {{/if}}
        {{/each}}
    }

    {{/each}}
}