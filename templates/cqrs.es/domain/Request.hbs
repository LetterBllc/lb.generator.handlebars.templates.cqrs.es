using System;
using System.Threading.Tasks;
using CommonServiceLocator;
using {{domain.CoreESNamespace}};
using {{domain.CoreESNamespace}}.Interfaces;
using {{domain.CoreNamespace}}.Logging;
using MassTransit;
using Microsoft.Extensions.Logging;
using {{domain.Namespace}}.Domain.Aggregates;
using {{domain.Namespace}}.Domain.Shared;

namespace {{domain.Namespace}}.Domain.Requests
{
    {{#each entity.Actions}}
    public partial class {{Command}}Request : Request{{#unless UseConstructor}}, IHasOriginalVersion{{/unless}}
    {
        {{#each (where Properties 'IsRequestParameter eq true')}}
        public {{getType .}} {{Name}} { get; set; }
        {{/each}}
        {{#unless UseConstructor}}
        public long OriginalVersion { get; set; }
        {{/unless}}

        public {{Command}}Request()
        {
        }

        public {{Command}}Request({{#each (where Properties 'IsRequestParameter eq true')}}{{#unless @first}},{{/unless}}
            {{getType .}} {{camelCase Name}}{{/each}}{{#unless UseConstructor}},
            long originalVersion{{/unless}}
        )
        {
            {{#each Properties}}
            {{#if IsRequestParameter}}
            {{Name}} = {{camelCase Name}};
            {{/if}}
            {{/each}}
            {{#unless UseConstructor}}
            OriginalVersion = originalVersion;
            {{/unless}}
        }
    }

    public partial class {{Command}}Response : RequestResponse<{{Command}}Request>
    {
        {{#each (where Properties 'IsIncludedInResponse eq true')}}
        public {{getType .}} {{Name}} { get; set; }
        {{/each}}

        public {{Command}}Response() : base()
        {
        }

        public {{Command}}Response(
            {{Command}}Request request
        ) : base(request)
        {
        }
        {{#if (any Properties 'IsIncludedInResponse eq true')}}

        public {{Command}}Response(
            {{Command}}Request request{{#each (where Properties 'IsIncludedInResponse eq true')}},
            {{getType .}} {{camelCase Name}}{{/each}}
        ) : base(request)
        {
            {{#each (where Properties 'IsIncludedInResponse eq true')}}
            {{Name}} = {{camelCase Name}};
            {{/each}}
        }
        {{/if}}

        public {{Command}}Response(
            Exception exception,
            {{Command}}Request request
        ) : base(exception, request)
        {
        }
    }

    {{/each}}
    {{#if entity.Snapshottable}}
    public partial class Snapshot{{entity.Name}}Request : Request, IHasOriginalVersion
    {
        public Guid {{entity.Name}}Id { get; private set; }
        public long OriginalVersion { get; private set; }

        public Snapshot{{entity.Name}}Request(
            Guid {{camelCase entity.Name}}Id,
            long originalVersion
        )
        {
            {{entity.Name}}Id = {{camelCase entity.Name}}Id;
            OriginalVersion = originalVersion;
        }
    }

    public partial class Snapshot{{entity.Name}}Response : RequestResponse<Snapshot{{entity.Name}}Request>
    {
        public Snapshot{{entity.Name}}Response() : base()
        {
        }

        public Snapshot{{entity.Name}}Response(
            Snapshot{{entity.Name}}Request request
        ) : base(request)
        {
        }

        public Snapshot{{entity.Name}}Response(
            Exception exception,
            Snapshot{{entity.Name}}Request request
        ) : base(exception, request)
        {
        }
    }
    {{/if}}

    public partial class {{entity.Name}}RequestHandlers : {{#each entity.Actions}}{{#unless @first}},{{/unless}}
        IConsumer<{{Command}}Request>{{/each}}{{#if entity.Snapshottable}},
        IConsumer<Snapshot{{entity.Name}}Request>{{/if}}
    {
        private readonly IRepository _repository;
        private readonly ILogger _log;

        public {{entity.Name}}RequestHandlers()
        {
            _repository = ServiceLocator.Current.GetInstance<IRepository>();
            _log = ServiceLocator.Current.GetInstance<ILogger>();
        }
        
        private void CheckVersion(Aggregate aggregate, IHasOriginalVersion message, string type = "{{entity.Name}}")
        {
            if (aggregate.Version != message.OriginalVersion)
                throw new Exception(
                    $"{type} Version: [{aggregate.Version}] does not match Expected Version: {message.OriginalVersion}");
        }
        {{#each entity.Actions}}

        public async Task Consume(ConsumeContext<{{Command}}Request> context)
        {
            var tag = string.Empty;

            try
            {
                var message = context.Message;

                tag = $"Consuming {{../entity.Name}} {{Command}}Request{{#unless UseConstructor}}: {message.Id}{{/unless}}";

                _log.Debug(tag);

                {{#if UseConstructor}}
                var {{camelCase ../entity.Name}} = new {{../entity.Name}}({{#each Properties}}{{#unless @first}},{{/unless}}
                    {{#if IsRequestParameter}}message.{{Name}}{{else}}{{#if DefaultExpression}}{{DefaultExpression}}{{/if}}{{/if}}{{/each}}
                );
                {{else}}
                var {{camelCase ../entity.Name}} = await _repository.GetById<{{../entity.Name}}>(message.Id);

                CheckVersion({{camelCase ../entity.Name}}, message);

                {{camelCase ../entity.Name}}.{{Name}}({{#each Properties}}{{#unless @first}},{{/unless}}
                    {{#if IsRequestParameter}}message.{{Name}}{{else}}{{#if DefaultExpression}}{{DefaultExpression}}{{/if}}{{/if}}{{/each}}
                );
                {{/if}}

                _log.Debug($"{tag}{{#if UseConstructor}}: {{write '{'}}{{camelCase ../entity.Name}}.{{#with (first Properties "IsId eq true")}}{{Name}}{{/with}}{{write '}'}}{{/if}} - Saving");
                {{#if UseConstructor}}
                await _repository.Save({{camelCase ../entity.Name}}, -1);
                {{else}}
                await _repository.Save({{camelCase ../entity.Name}});
                {{/if}}
                _log.Debug($"{tag}{{#if UseConstructor}}: {{write '{'}}{{camelCase ../entity.Name}}.{{#with (first Properties "IsId eq true")}}{{Name}}{{/with}}{{write '}'}}{{/if}} - Saved");

                await context.RespondAsync<{{Command}}Response>(
                    new {{Command}}Response(
                        context.Message{{#each (where Properties 'IsIncludedInResponse eq true')}},
                        {{camelCase ../../entity.Name}}.{{Name}}{{/each}}
                    )
                );
            }
            catch (Exception exception)
            {
                _log.Warn($"{tag} - Error: {exception.Message}");
                await context.RespondAsync<{{Command}}Response>(new {{Command}}Response(exception, context.Message));
            }
        }
        {{/each}}
        {{#if entity.Snapshottable}}

        public async Task Consume(ConsumeContext<Snapshot{{entity.Name}}Request> context)
        {
            var tag = string.Empty;

            try
            {
                var message = context.Message;

                tag = $"Consuming {{entity.Name}} Snapshot{{entity.Name}}Request: {message.{{entity.Name}}Id}";
                _log.Debug(tag);

                var {{camelCase entity.Name}} = await _repository.GetById<{{entity.Name}}>(message.{{entity.Name}}Id);

                CheckVersion({{camelCase entity.Name}}, message);

                {{camelCase entity.Name}}.Snapshot();

                _log.Debug($"{tag} - Saving");
                await _repository.Save({{camelCase entity.Name}});
                _log.Debug($"{tag} - Saved");

                await context.RespondAsync<Snapshot{{entity.Name}}Response>(
                    new Snapshot{{entity.Name}}Response(
                        context.Message
                    )
                );
            }
            catch (Exception exception)
            {
                _log.Warn($"{tag} - Error: {exception.Message}");
                await context.RespondAsync<Snapshot{{entity.Name}}Response>(new Snapshot{{entity.Name}}Response(exception, context.Message));
            }
        }
        {{/if}}
    }
}