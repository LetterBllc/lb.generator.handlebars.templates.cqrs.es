using System;
using {{domain.CoreESNamespace}};
using {{domain.CoreESNamespace}}.Interfaces;
using {{domain.Namespace}}.Domain.Events;
using {{domain.Namespace}}.Domain.Shared;

namespace {{domain.Namespace}}.Domain.Aggregates
{
    public partial class {{entity.Name}} : {{#if entity.Snapshottable}}SnapshottableAggregate<{{entity.Name}}>{{else}}Aggregate{{/if}}{{#each entity.Actions}},
        IApplyEvent<{{Event}}>{{/each}}
    {
        {{#each entity.Properties}}
        {{#unless IsId}}
        public {{getType .}} {{Name}} { get; private set; }
        {{/unless}}
        {{/each}}

        public {{entity.Name}}() { }

        {{#each entity.Actions}}
        {{#if UseConstructor}}
        public {{../entity.Name}}({{else}}
        public void {{Name}}({{/if}}{{#each Properties}}{{#unless @first}},{{/unless}}
            {{getType .}} {{camelCase Name}}{{/each}}
        )
        {
            {{#if Condition}}
            if (!({{{Condition}}}))
                return;
            
            {{/if}}
            ApplyChange(
                new {{Event}}({{#each Properties}}{{#unless @first}},{{/unless}}
                    {{camelCase Name}}{{/each}}
                )
            );
        }

        public void Apply({{Event}} {{camelCase Event}})
        {
            {{#each Properties}}
            {{#if IsId}}
            {{#if ../UseConstructor}}
            {{Name}} = {{camelCase ../Event}}.{{Name}};
            {{/if}}
            {{else}}
            {{Name}} = {{camelCase ../Event}}.{{Name}};
            {{/if}}
            {{/each}}
            {{#if Action}}
            {{{Action}}}
            {{/if}}
        }
        {{/each}}
        {{#if entity.Snapshottable}}

        public override void Apply(ISnapshot<{{entity.Name}}> snapshot)
        {
            {{#each entity.Properties}}
            {{Name}} = snapshot.Aggregate.{{Name}};
            {{/each}}
        }
        {{/if}}
    }
}