using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using {{CoreNamespace}}.Logging;
using {{CoreNamespace}}.Shared;
using Microsoft.Extensions.Logging;
using PetaPoco;
using {{Namespace}}.Domain.Dtos;

namespace {{Namespace}}.Domain.Views
{
    public class ViewStore : IDisposable
    {
        private readonly ILogger _log;
        private readonly IDatabase _database;
        private static int _tryLoadWindow = 3;
        private static int _tryLoadInterval = 250;

        public ViewStore(IDatabase database, ILogger log)
        {
            _database = database;
            _log = log;
        }

        private async Task<T> GetDto<T>(Guid id, long version)
        {
            var description = TypeHelper.GetDescription<T>();

            T dto;

            var startTime = DateTime.Now;

            while (true)
            {
                if (DateTime.Now.Subtract(startTime).TotalSeconds > _tryLoadWindow)
                    throw new Exception($"{description} was not found in SQL data.");

                _log.Debug($"Retrieving {description} - Id: {id}  Version: {version}");

                dto = _database
                    .SingleOrDefault<T>(
                        "WHERE Id = @0 AND Version = @1",
                        id,
                        version
                    );

                if (dto != null) break;

                await Task.Delay(_tryLoadInterval);
            }

            return dto;
        }

        private async Task<T> GetDto<T>(Guid id, long version, bool shouldExist)
        {
            var description = TypeHelper.GetDescription<T>();

            T dto = default(T);

            var startTime = DateTime.Now;

            while (true)
            {
                if (DateTime.Now.Subtract(startTime).TotalSeconds > _tryLoadWindow)
                    break;


                _log.Debug($"Retrieving {description} - Id: {id}  Version: {version}");

                dto = await _database
                    .SingleOrDefaultAsync<T>(
                        "WHERE Id = @0 AND Version = @1",
                        id,
                        version
                    );

                if ((shouldExist && dto == null) ||
                    (!shouldExist && dto != null))
                {
                    await Task.Delay(_tryLoadInterval);
                    continue;
                }

                break;
            }

            return dto;
        }
        {{#each DomainEntities}}
        {{#each Views}}

        public async Task<IEnumerable<{{dtoName}}>> Get{{Name}}()
        {
            await Task.Run(() => { });
            return _database.Query<{{dtoName}}>("SELECT * FROM dbo.{{Name}}");
        }

        public async Task<{{dtoName}}> Get{{dtoName}}(Guid id)
        {
            return await _database
                .SingleOrDefaultAsync<{{dtoName}}>(
                    "WHERE Id = @0",
                    id
                );
        }

        public async Task<{{dtoName}}> Get{{dtoName}}(Guid id, long version)
        {
            return await GetDto<{{dtoName}}>(id, version);
        }

        public async Task<{{dtoName}}> Get{{dtoName}}(Guid id, long version, bool shouldExist)
        {
            return await GetDto<{{dtoName}}>(id, version, shouldExist);
        }
        {{/each}}
        {{/each}}

        public void Dispose()
        {
            _database?.Dispose();
        }
    }
}
