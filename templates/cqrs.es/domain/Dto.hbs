using System;
using PetaPoco;
using {{domain.Namespace}}.Domain.Entities.Interfaces;
using {{domain.Namespace}}.Domain.Shared;

namespace {{domain.Namespace}}.Domain.Dtos
{
    {{#each entity.Views}}
    [TableName("{{Name}}")]
    {{#each Properties}}
    {{#if IsId}}
    [PrimaryKey("{{Name}}", AutoIncrement = false)]
    {{/if}}
    {{/each}}
    public partial class {{Name}}Dto{{#if ImplementsEntityInterface}} : I{{../entity.Name}}Entity{{/if}}
    {
        {{#each Properties}}
        {{#with (findIn ../../entity.Properties 'Name' Name)}}
        [Column]
        public {{getType .}} {{Name}} { get; set; }

        {{/with}}
        {{/each}}
        [Column]
        public long Version { get; set; }

        public const string CreateViewTableStatement = 
            @"
IF NOT EXISTS(SELECT [name] FROM sys.tables WHERE [name] = '{{Name}}')
    CREATE TABLE [dbo].[{{Name}}]({{#each Properties}}{{#unless @first}},{{/unless}}
        [{{Name}}] {{getSqlType .}} {{#unless IsNullable}}NOT {{/unless}}NULL{{/each}},
        [Version] [bigint] NULL,
        CONSTRAINT [PK_{{Name}}] PRIMARY KEY CLUSTERED 
        ({{#each Properties}}{{#if IsId}}{{#unless @first}},{{/unless}}
            [{{Name}}] ASC{{/if}}{{/each}}
        )
    )
";
        {{#if ImplementsEntityInterface}}

        public I{{../entity.Name}}Entity CopyFrom(I{{../entity.Name}}Entity @from)
        {
            {{#each ../entity.Properties}}
            {{Name}} = @from.{{Name}};
            {{/each}}
            Version = @from.Version;
            return this;
        }

        public void CopyTo(I{{../entity.Name}}Entity @to)
        {
            @to.CopyFrom(this);
        }
        {{/if}}
    }

    {{/each}}
}